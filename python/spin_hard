#!/usr/bin/env python
"""
"""
from __future__ import division

import time
import sys
import argparse
import random
import json

from tension import opc

#-------------------------------------------------------------------------------
# command line

parser = argparse.ArgumentParser()
parser.add_argument('-s', '--server', dest='server', default='127.0.0.1:7890',
                    action='store', type=str,
                    help='ip and port of server')
parser.add_argument('-f', '--fps', dest='fps', default=20,
                    action='store', type=int,
                    help='frames per second')
parser.add_argument('-c', '--channel', nargs='+', dest='channels', default=[],
                    action='append',
                    help='opc channel to broadcast on')


def load_layout(fn):
    coordinates = []
    with open(fn) as f:
        for item in json.load(f):
            if 'point' in item:
                coordinates.append(tuple(item['point']))
    return coordinates


if __name__ == "__main__":
    print "We start it up yo!"

    options = parser.parse_args()
    print options 

    if len(options.channels) == 0:
        parser.print_help()
        print 'ERROR: you must specify at least one channel with a layout using --channel'
        sys.exit(1)

    layouts = {}
    n_pixels = {}
    seed_values = {}
    for channel, layout_file in options.channels:
        channel = int(channel)
        layouts[channel] = load_layout(layout_file)
        n_pixels[channel] = len(layouts[channel])
        seed_values[channel] = [random.random() for ii in range(n_pixels[channel])]


    #-------------------------------------------------------------------------------
    # connect to server

    client = opc.Client(options.server)
    if client.can_connect():
        print 'connected to %s' % options.server
    else:
        # can't connect, but keep running in case the server appears later
        print 'WARNING: could not connect to %s' % options.server

    start_time = time.time()
    last_frame = 0
    time_per_frame = 1.0 / options.fps

    #from tension.miami import pixel_color
    from tension.fire import init, pixel_color

    for channel, coordinates in layouts.items():
        init(channel, coordinates)

    while True:
        t = time.time() - start_time
        for channel, coordinates in layouts.items():
            pixels = [
                pixel_color(t, channel, coord, ii, n_pixels[channel], seed_values[channel])
                for ii, coord in enumerate(coordinates)
            ]
            client.put_pixels(pixels, channel=channel)
        time_taken = time.time() - start_time - t
        if time_taken < time_per_frame:
            #print "sleep for %f" % (time_per_frame - time_taken,)
            time.sleep(time_per_frame - time_taken)
        else:
            print "time taken was %f - too slow jim!" % time_taken
            #raise Exception("time taken was %f - too slow jim!" % time_taken)

